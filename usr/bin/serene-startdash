#!/usr/bin/env bash

# Serene-Startdash based EG-Installer
# SereneTeam (c) 2019.
# Twitter: @Serene_JP
#
# Yamada Hayao
# Twitter: @Hayao0819
# Email : shun819.mail@gmail.com



#===== 各基本ウィンドウの使い方 =====#
# プログレスバー
# command | loading [横幅] [高さ] [メッセージ]
#
# エラーウィンドウ
# error [横幅] [高さ] [メッセージ]
#
# 警告ウィンドウ
# warning [横幅] [高さ] [メッセージ]
#
# 情報ウィンドウ
# info [横幅] [高さ] [メッセージ]
#
# 改行する場合は \n と記述してください。　



#-- 設定 --#
settings=/etc/serene-startdash/config
entry_extension="entry"
version=1.10-2




#-- エラーチェック --#
set -eu



#-- 変数定義 --#
current_path=$(cd $(dirname $0) && pwd)/$(basename $0)
current_dir=$(dirname $current_path)
unset run



#-- 関数定義 --#

# 自分自身を呼び出す
function call_me () {
    export recall=true
    bash ${0} $options
}

# ウィンドウの基本型
function window () {
    zenity \
        --title="$window_text" \
        --window-icon="$window_icon" \
        $@
}

# 読み込みウィンドウ
function loading () {
    window \
        --progress \
        --auto-close \
        --pulsate \
        --width="$1" \
        --height="$2" \
        --text="$3"
}

# エラーウィンドウ
function error () {
    window \
        --error \
        --width="$1" \
        --height="$2" \
        --text="$3"
}

# 警告ウィンドウ
function warning () {
    window \
        --warning \
        --width="$1" \
        --height="$2" \
        --text="$3"
}

# 情報ウィンドウ
function info () {
    window \
        --info \
        --width="$1" \
        --height="$2" \
        --text="$3"
}

# 設定上の関数チェック
function check_func () {
    if [[ ! $(type -t $1) = "function" ]]; then
        error 800 100 "$2"
        exit 1
    fi
}

# パッケージチェック
function check_pkg () {
    if [[ -n $(installed_list | grep -x "$1") ]]; then
        printf "installed_apt"
    else
        printf "notinstalled"
    fi
}

function check_snap () {
    if [[ -n $(installed_snap_list | grep -x "$1") ]]; then
	printf "installed_snap"
    else
	printf "notinstalled"
    fi
}

# 値の初期化
function clear_variable () {
    unset name
    unset package_name
    unset description
    unset run_preparing
    unset preparing_msg
    unset install
    unset uninstall
    unset preparing
    unset install_check
}

# デバッグモード
function debug_msg () {
    if [[ $debug_mode = true ]]; then
        echo -e $@
    fi
}

# オプション確認メッセージ
function debug_opts_msg () {
    if [[ $debug_mode = true && $recall = false ]]; then
        echo -e $@
    fi
}



#-- ディスプレイチェック --#
if [[ -z $DISPLAY ]]; then
    echo "GUI環境で起動してください。" >&2
    exit 1
fi



#-- 設定読み込み --#
set +eu
if [[ ! -f $settings ]]; then
    error 600 100 "$settingsが存在しません。"
    exit 1
elif [[ ! -r $settings ]]; then
    error 600 100 "$settingsの読み込みに失敗しました。\n権限を確認してください。"
fi
source $settings
options=$(echo $fixed_option $@)
set -eu



#-- Rootチェック --#
if [[ ! $UID = 0 ]]; then
    pkexec env DISPLAY=$DISPLAY XAUTHORITY=$XAUTHORITY $current_path $options
    exit
fi



#-- アイコンチェック --#
if [[ ! -f $window_icon ]]; then
    error 600 100 "$window_iconが存在しません。"
    exit 1
elif [[ ! -r $window_icon ]]; then
    error 600 100 "$window_iconが読み込めませんでした。権限を確認してください。"
    exit 1
fi



#-- バージョン情報 --#
function show_version () {
    window \
        --info \
        --width="600" \
        --height="100" \
        --text="＝＝　EG-Installer　＝＝\nVersion:　${version}\nYamada　Hayao　shun819.mail@gmail.com"
    debug_msg "EG-Installer v${version}"
    exit 0
}



#-- デバッグ用引数 --#
set +eu
while getopts 'ehr:s:t:vxz' arg; do
    case "${arg}" in
        e) echo "${version} ${settings}"; exit 0;;
        h) info 700 100 "==　デバッグ用　==\nこれはデバッグ用オプションです。通常利用はしないでください。\n$settingsを変更することで値を保存できます。\n\n-h　:　このヘルプを表示します。このオプションが有効な場合、他のオプションは無視されます。\n-v　:　バージョン情報を表示します。\n-x　:　bashでのデバッグモードを有効化します。\n-z　:　デバッグモードを有効化します。（設定されたデバッグメッセージをターミナル上に表示します。）\n-r　[　実行する項目の番号　]　:　特定の動作をメニューをスキップして行います。\n-s　[スクリプトディレクトリ]　:　スクリプトディレクトリを指定します。\n-t　[　ウィンドウタイトル　]　:　ウィンドウタイトルを指定します。\n"; exit 0;;
        r) direct_execution=true;if [[ ! $recall = true ]]; then case ${OPTARG} in 1) run="クリーンアップ";; 2) run="アップグレード";; 3) run="追加と削除" ;;  *) error 600 100 "引数${OPTARG}が間違っています。"; exit 1 ;; esac; else exit 0; fi;;
        s) script_dir=${OPTARG}; debug_opts_msg "スクリプトディレクトリが${OPTARG}に指定されました。" ;;
        t) window_text=${OPTARG}; debug_opts_msg "ウィンドウタイトルが${OPTARG}に設定されました。" ;;
        v) show_version;exit 0;;
        x) set -x; debug_opts_msg "bashデバッグモードが有効化されました。";;
        z) debug_mode=true; debug_opts_msg "デバッグモードが有効化されました。" ;;
        w) set -x; debug_mode=true; debug_opts_msg "bashデバッグモードが有効化されました。\nデバッグモードが有効化されました。";;
        "") : ;;
        #* ) exit 1;;
    esac
done
set -eu



#-- check_pkgについて --#
make_installed_list () { ${pacman} -Q | awk '{print $2}' > /tmp/installed_list ;}
installed_list () { cat /tmp/installed_list ;}
remove_installed_list () { rm -rf /tmp/installed_list ;}

#-- check_snapについて --#
function isinstalled_snap () { 
    if [[ "$(check_pkg snapd)" == installed_apt ]]; then
	    snapd=installed
    else
	printf "cannot_get_install_status"
    fi
}

function installed_snap_list () {
    if [[ "$snapd" == installed ]]; then
        snap list | awk 'NR>1 {print $1}'
    else
	printf "canot_get_install_status"
    fi
}


#-- set false --#
set +eu
[[ ! $recall = true ]] && recall=false
[[ ! $debug_mode = true ]] && debug_mode=false
set -eu



#-- クリーンアップ --#
function cleanup () {
    apt-get --yes clean | loading 600 100 "クリーンアップを実行中です。"
    apt-get --yes autoremove | loading 600 100 "クリーンアップを実行中です"
}



#-- インストールとアンインストール --#
function install_and_uninstall () {

    # スクリプトのアップデート処理
    set + eu
    if [[ -n $softwares_update && -f $softwares_update && -x $softwares_update ]]; then
        $softwares_update | loading 600 100 "スクリプトを更新しています。"
        if [[ -z $(ls /etc/serene-startdash/softwares 2> /dev/null) ]]; then
            error 500 100 "スクリプトのアップデートに失敗しました。"
            exit 1
        fi
    fi
    set -eu

    # スクリプト読み込み
    scripts=($(cd $script_dir; ls *.${entry_extension}; cd ..))
    for package in ${scripts[@]}; do
        source $script_dir/$package

        function check_func () {
            set +eu
            if [[ ! $(type -t $1) = "function" ]]; then
                error 600 100 "スクリプト$packageの$1関数が間違っています。"
                exit 1
            fi
            set -eu
        }
        function check_variable () {
            set +eu
            eval variable=$1
            if [[ -z $variable ]]; then
                error 600 100 "スクリプト$packageに$variable変数が間違っています。"
                exit 1
            fi
            set -eu
        }

        check_variable name
        set +eu
        if [[ ! $install_check = false ]]; then
            check_variable package_name
            check_func uninstall
        fi
        set -eu
        check_variable description
        check_variable run_preparing
        check_func install
        if $run_preparing; then
            check_func preparing
        fi
        clear_variable
    done

    # snapパッケージのアンインストール
    function uninstall_snap () {
        snap remove $name
    }



    # リスト
    # 高速化のためにここでsnapdがインストールされているか判定する
   isinstalled_snap
   make_installed_list

    window \
        --warning \
        --width="600" \
        --height="100" \
        --text="スクリプトの読み込みを行います。これにはしばらく時間がかかる場合があります。\nしばらくたっても表示されない場合はターミナル上でスクリプトを実行してみてください。" \
        --ok-label="読み込み開始"
    
    gen_list () {
        window \
            --list \
            --checklist \
            --column="選択" \
            --column="パッケージ" \
            --column="インストール済" \
            --column="説明" \
            --width="900" \
            --height="500" \
            --text="インストールまたは削除したいパッケージを選択してください。" \
            $(
                scripts=($(cd $script_dir; ls *.${entry_extension}; cd ..))
                for package in ${scripts[@]}; do
                    source $script_dir/$package
                    set +eu
                    if [[ $install_check = false ]]; then
                        status_display="None"
                    elif [[ $(check_pkg $package_name) == installed_apt ]] ; then
			status_display="はい(APT)"
		    elif [[ $(check_snap $package_name) == installed_snap ]]; then
			status_display="はい(snap)"
                    elif [[ $(check_pkg $package_name) == notinstalled && $(check_pkg $package_name) == notinstalled ]]; then
                        status_display="いいえ"
		    else
			statis_display="None"
                    fi
                    set -eu
                    echo "FALSE"
                    echo "$name"
                    echo "$status_display"
                    echo "$description"
                    clear_variable
                done
            )
    }

    selected_list=$(gen_list; exit_code=$?)
    selected_list=(${selected_list//'|'/ })
    set +eu
    if [[ ! $exit_code = 0 && -z $selected_list ]]; then
        error 600 100 "パッケージが選択されませんでした。$(
        if [[ ! $direct_execution = "true" ]]; then
            echo 'トップに戻ります。'
        else
            echo '終了します。'
        fi
        )"
        call_me $options
        remove_installed_list
        exit
    fi
    set -eu


    # データベースの更新
    $pacman -Syy --noconfirm | loading 600 100 "リポジトリデータベースを更新しています。"



    # 実行

    for selected in ${selected_list[@]}; do
        # 選択パッケージに対応しているファイルを探す
        scripts=($(cd $script_dir; ls *.${entry_extension}; cd ..))
        for package in ${scripts[@]}; do
            set name
            set description
            set preparing
            set install

            source $script_dir/$package
            if [[ $name = $selected ]]; then
                break
            fi
            clear_variable
        done

        # インストール or アンインストール
        source $script_dir/$package
        set +eu
        if [[ $install_check = false ]]; then
            set -eu
            window \
                --question \
                --text="スクリプト$nameを適用します。よろしいですか？\nこのスクリプトは適用済、未適用を判別していません。複数回の適用は正常に動作しない可能性がありますので注意してください。" \
                --ok-label="続行する" \
                --cancel-label="中断する" \
                --width=600 \
                --height=100
            if $run_preparing; then
                if [[ -n $preparing_msg ]]; then
                    preparing | loading 600 100 $preparing_msg
                else
                    preparing | loading 600 100 "パッケージをビルドしています"
                fi
            fi
            install | loading 600 100 "パッケージ$nameをインストールしています"
            set +eu
        else
            if [[ $(check_pkg $package_name) = notinstalled ]]; then
                set -eu
                window \
                    --question \
                    --text="パッケージ$nameをインストールします。よろしいですか？" \
                    --ok-label="続行する" \
                    --cancel-label="中断する" \
                    --width=600 \
                    --height=100
                if $run_preparing; then
                    preparing | loading 600 100 "パッケージをビルドしています"
                fi
                install | loading 600 100 "パッケージ$nameをインストールしています"
                set +eu
	    elif [[ $(check_pkg $package_name) == installed_apt ]]; then
                set -eu
                window \
                    --question \
                    --text="パッケージ$nameをアンインストールします。よろしいですか？" \
                    --ok-label="続行する" \
                    --cancel-label="中断する" \
                    --width=600 \
                    --height=100
                uninstall | loading 600 100 "パッケージ$nameをアンインストールしています。"
                set +eu
	    elif [[ $(check_snap $package_name) == installed_snap ]]; then
	        set -eu
		window \
		    --question \
		    --text="パッケージ$nameはsnapパッケージでインストール済みです。debパッケージに置き換えます。よろしいですか？" \
		    --ok-label="続行する" \
		    --cancel-label="中断する" \
		    --width=600 \
		    --height=100
		uninstall_snap | loading 600 100 "パッケージ$nameをアンインストールしています。"
		install | loading 600 100 "パッケージ$nameをインストールしています"
		set +eu
            fi
        fi
        set -eu
    done
    info 600 100 "処理が完了しました。\n詳細はターミナルを参照してください。"
}



#-- 実行 --#
set +eu
unset exit_code

# メニュー
if [[ ! $direct_execution = true ]]; then
    run=$(
        window \
            --info \
            --text="何を実行しますか？\n\n終了・・・終了します$( if [[ -n $softwares_update && -f $softwares_update && -x $softwares_update ]]; then echo "\n一覧をアップデート・・・「追加と削除」で選択できる項目をアップデートします。"; fi )\nクリーンアップ・・・パッケージのクリーンアップを行います。\nアップグレード・・・パッケージのアップグレードを行います\n追加と削除・・・パッケージのインストールやアンインストールを行います。 " \
            --ok-label="終了する" \
            $(
                # スクリプトのアップデート
                if [[ -n $softwares_update && -f $softwares_update && -x $softwares_update ]]; then
                # if true; then
                    echo "--extra-button=一覧をアップデート"
                fi
            ) \
            --extra-button="クリーンアップ" \
            --extra-button="アップグレード" \
            --extra-button="追加と削除" \
            --width="400" \
            --height="120"
    )
    exit_code=$?
    case $exit_code in
                0 ) exit 0 ;;
                * ) :;;
    esac
fi


debug_msg "$runが選択されました。"
case $run in
    "追加と削除" ) install_and_uninstall ;;
    "アップグレード" ) $pacman -Syu --noconfirm | loading 600 100 "パッケージのアップグレードを行っています。" ;;
    "クリーンアップ" ) cleanup ;;
    "一覧をアップデート" ) $softwares_update | loading 600 100 "スクリプトを更新しています。";;
    * ) error 600 100 "例外が発生しました。"; exit 1;;
esac
set -eu



#-- 最初に戻る --#
call_me $options
